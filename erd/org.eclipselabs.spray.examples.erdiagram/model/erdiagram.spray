/*************************************************************************************
 *
 * Spray diagram definition
 * 
 * This file contains the definition of a graphical editor using the Spray Language.
 * Refer to http://code.google.com/a/eclipselabs.org/p/spray/ for documentation.
 *
 * See also erdiagram.properties to configure generator properties.
 *************************************************************************************/
// Add import statements here
import ErdiagramDSL.*

diagram Myerdiagram for Erdiagram style ErdiagramDefaultStyle


// Add class mappings here. Refer to EClasses here. Don't forget to configure a
// dependency to the plugin defining the EMF metamodel in META-INF/MANIFEST.MF.
// It is required to have a genmodel for the metamodel.
//
// Example class mapping:
//   class BusinessClass icon "ecore/EClass.gif" {
//     shape RectangleShape
//     behavior {
//       // Enable create feature for this class and add it to the palette "Shapes"
//       create into types palette "Shapes";
//     }
//   }
//
// Example association mapping:
//   class Association icon "connection16.gif" {
//     connection ArrowConnection {
//       from source;
//       to target;
//     }
//   }

class Entity {
	shape EntityShape {
		name into EntityText
	}
	behavior {
		create into elements palette "Elements"
	}
}

class Relationship {
	shape RelationshipShape {
		name into RelationshipText
		description into RelationshipDescription
	}
	behavior {
		create into elements palette "Elements" askFor name
	}
}

class Attribute {
	shape AttributeShape {
		name into AttributeText
	}
	references {
		parent : connection 
	}
	behavior {
		create into attributes palette "Attributes"
	}
}

class Attribute alias MultivalAttribute {
	shape MultiValAttributeShape {
		name into AttributeText
	}
		references {
		parent : connection
	}
	behavior {
		create into attributes palette "Attributes"
	}
}

class Attribute alias KeyAttribute {
	shape KeyAttributeShape {
		name into AttributeText
	}
		references {
		parent : connection
	}
	behavior {
		create into attributes palette "Attributes"
	}
}
